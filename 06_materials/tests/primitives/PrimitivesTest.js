"use strict";
var Vector3D_1 = require("awayjs-core/lib/geom/Vector3D");
var Sampler2D_1 = require("awayjs-core/lib/image/Sampler2D");
var RequestAnimationFrame_1 = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Debug_1 = require("awayjs-core/lib/utils/Debug");
var View_1 = require("awayjs-display/lib/View");
var DirectionalLight_1 = require("awayjs-display/lib/display/DirectionalLight");
var DefaultMaterialManager_1 = require("awayjs-display/lib/managers/DefaultMaterialManager");
var StaticLightPicker_1 = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var PrimitiveCapsulePrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveCapsulePrefab");
var PrimitiveConePrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveConePrefab");
var PrimitiveCubePrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveCubePrefab");
var PrimitiveCylinderPrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveCylinderPrefab");
var PrimitivePlanePrefab_1 = require("awayjs-display/lib/prefabs/PrimitivePlanePrefab");
var PrimitiveSpherePrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveSpherePrefab");
var PrimitiveTorusPrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveTorusPrefab");
var DefaultRenderer_1 = require("awayjs-renderergl/lib/DefaultRenderer");
var MethodMaterial_1 = require("awayjs-methodmaterials/lib/MethodMaterial");
var PrimitivesTest = (function () {
    function PrimitivesTest() {
        var _this = this;
        this.sprites = new Array();
        this.radius = 400;
        Debug_1.Debug.LOG_PI_ERRORS = false;
        Debug_1.Debug.THROW_ERRORS = false;
        this.view = new View_1.View(new DefaultRenderer_1.DefaultRenderer());
        this.raf = new RequestAnimationFrame_1.RequestAnimationFrame(this.render, this);
        this.light = new DirectionalLight_1.DirectionalLight();
        this.light.color = 0xFFFFFF;
        this.light.direction = new Vector3D_1.Vector3D(1, 1, 0);
        this.light.ambient = 0;
        this.light.ambientColor = 0xFFFFFF;
        this.light.diffuse = 1;
        this.light.specular = 1;
        this.lightB = new DirectionalLight_1.DirectionalLight();
        this.lightB.color = 0xFF0000;
        this.lightB.direction = new Vector3D_1.Vector3D(-1, 0, 1);
        this.lightB.ambient = 0;
        this.lightB.ambientColor = 0xFFFFFF;
        this.lightB.diffuse = 1;
        this.lightB.specular = 1;
        this.staticLightPicker = new StaticLightPicker_1.StaticLightPicker([this.light, this.lightB]);
        this.view.scene.addChild(this.light);
        this.view.scene.addChild(this.lightB);
        this.view.backgroundColor = 0x222222;
        window.onresize = function (event) { return _this.onResize(event); };
        this.initSpritees();
        this.raf.start();
        this.onResize();
    }
    PrimitivesTest.prototype.initSpritees = function () {
        var primitives = new Array();
        var material = new MethodMaterial_1.MethodMaterial(DefaultMaterialManager_1.DefaultMaterialManager.getDefaultImage2D());
        material.style.sampler = new Sampler2D_1.Sampler2D(false, false, true);
        material.lightPicker = this.staticLightPicker;
        primitives.push(new PrimitiveTorusPrefab_1.PrimitiveTorusPrefab());
        primitives.push(new PrimitiveSpherePrefab_1.PrimitiveSpherePrefab());
        primitives.push(new PrimitiveCapsulePrefab_1.PrimitiveCapsulePrefab());
        primitives.push(new PrimitiveCylinderPrefab_1.PrimitiveCylinderPrefab());
        primitives.push(new PrimitivePlanePrefab_1.PrimitivePlanePrefab());
        primitives.push(new PrimitiveConePrefab_1.PrimitiveConePrefab());
        primitives.push(new PrimitiveCubePrefab_1.PrimitiveCubePrefab());
        var sprite;
        for (var c = 0; c < primitives.length; c++) {
            primitives[c].material = material;
            var t = Math.PI * 2 * c / primitives.length;
            sprite = primitives[c].getNewObject();
            sprite.x = Math.cos(t) * this.radius;
            sprite.y = Math.sin(t) * this.radius;
            sprite.z = 0;
            sprite.transform.scaleTo(2, 2, 2);
            this.view.scene.addChild(sprite);
            this.sprites.push(sprite);
        }
    };
    PrimitivesTest.prototype.render = function () {
        if (this.sprites)
            for (var c = 0; c < this.sprites.length; c++)
                this.sprites[c].rotationY += 1;
        this.view.render();
    };
    PrimitivesTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.y = 0;
        this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
    };
    return PrimitivesTest;
}());

//# sourceMappingURL=data:application/json;base64,
