"use strict";
var Sampler2D_1 = require("awayjs-core/lib/image/Sampler2D");
var Vector3D_1 = require("awayjs-core/lib/geom/Vector3D");
var URLLoader_1 = require("awayjs-core/lib/net/URLLoader");
var URLLoaderDataFormat_1 = require("awayjs-core/lib/net/URLLoaderDataFormat");
var URLRequest_1 = require("awayjs-core/lib/net/URLRequest");
var URLLoaderEvent_1 = require("awayjs-core/lib/events/URLLoaderEvent");
var ParserUtils_1 = require("awayjs-core/lib/parsers/ParserUtils");
var PerspectiveProjection_1 = require("awayjs-core/lib/projections/PerspectiveProjection");
var RequestAnimationFrame_1 = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Debug_1 = require("awayjs-core/lib/utils/Debug");
var View_1 = require("awayjs-display/lib/View");
var DirectionalLight_1 = require("awayjs-display/lib/display/DirectionalLight");
var ElementsType_1 = require("awayjs-display/lib/graphics/ElementsType");
var StaticLightPicker_1 = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var PrimitiveTorusPrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveTorusPrefab");
var DefaultRenderer_1 = require("awayjs-renderergl/lib/DefaultRenderer");
var MethodMaterial_1 = require("awayjs-methodmaterials/lib/MethodMaterial");
var TorusLight = (function () {
    function TorusLight() {
        Debug_1.Debug.THROW_ERRORS = false;
        Debug_1.Debug.ENABLE_LOG = false;
        Debug_1.Debug.LOG_PI_ERRORS = false;
        this._view = new View_1.View(new DefaultRenderer_1.DefaultRenderer());
        this._view.camera.projection = new PerspectiveProjection_1.PerspectiveProjection(60);
        this.loadResources();
    }
    TorusLight.prototype.loadResources = function () {
        var _this = this;
        var urlRequest = new URLRequest_1.URLRequest("assets/dots.png");
        var urlLoader = new URLLoader_1.URLLoader();
        urlLoader.dataFormat = URLLoaderDataFormat_1.URLLoaderDataFormat.BLOB;
        urlLoader.addEventListener(URLLoaderEvent_1.URLLoaderEvent.LOAD_COMPLETE, function (event) { return _this.imageCompleteHandler(event); });
        urlLoader.load(urlRequest);
    };
    TorusLight.prototype.imageCompleteHandler = function (event) {
        var _this = this;
        var imageLoader = event.target;
        this._image = ParserUtils_1.ParserUtils.blobToImage(imageLoader.data);
        this._image.onload = function (event) { return _this.onLoadComplete(event); };
    };
    TorusLight.prototype.onLoadComplete = function (event) {
        var _this = this;
        var light = new DirectionalLight_1.DirectionalLight();
        light.direction = new Vector3D_1.Vector3D(0, 0, 1);
        light.diffuse = .7;
        light.specular = 1;
        this._view.scene.addChild(light);
        var lightPicker = new StaticLightPicker_1.StaticLightPicker([light]);
        var matTx = new MethodMaterial_1.MethodMaterial(ParserUtils_1.ParserUtils.imageToBitmapImage2D(this._image));
        matTx.style.sampler = new Sampler2D_1.Sampler2D(true, true, true);
        matTx.lightPicker = lightPicker;
        var torus = new PrimitiveTorusPrefab_1.PrimitiveTorusPrefab(matTx, ElementsType_1.ElementsType.TRIANGLE, 220, 80, 32, 16, false);
        this._sprite = torus.getNewObject();
        this._view.scene.addChild(this._sprite);
        this._raf = new RequestAnimationFrame_1.RequestAnimationFrame(this.render, this);
        this._raf.start();
        window.onresize = function (event) { return _this.resize(event); };
        this.resize();
    };
    TorusLight.prototype.render = function (dt) {
        if (dt === void 0) { dt = null; }
        this._sprite.rotationY += 1;
        this._view.render();
    };
    TorusLight.prototype.resize = function (event) {
        if (event === void 0) { event = null; }
        this._view.y = 0;
        this._view.x = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    return TorusLight;
}());

//# sourceMappingURL=data:application/json;base64,
