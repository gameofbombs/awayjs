"use strict";
var Vector3D_1 = require("awayjs-core/lib/geom/Vector3D");
var RequestAnimationFrame_1 = require("awayjs-core/lib/utils/RequestAnimationFrame");
var Debug_1 = require("awayjs-core/lib/utils/Debug");
var View_1 = require("awayjs-display/lib/View");
var PointLight_1 = require("awayjs-display/lib/display/PointLight");
var StaticLightPicker_1 = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var PrimitiveTorusPrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveTorusPrefab");
var ElementsType_1 = require("awayjs-display/lib/graphics/ElementsType");
var DefaultRenderer_1 = require("awayjs-renderergl/lib/DefaultRenderer");
var MethodMaterial_1 = require("awayjs-methodmaterials/lib/MethodMaterial");
var ColorMultiPassMatTest = (function () {
    function ColorMultiPassMatTest() {
        var _this = this;
        this.counter = 0;
        this.center = new Vector3D_1.Vector3D();
        Debug_1.Debug.THROW_ERRORS = false;
        Debug_1.Debug.LOG_PI_ERRORS = false;
        this.light = new PointLight_1.PointLight();
        this.view = new View_1.View(new DefaultRenderer_1.DefaultRenderer());
        this.view.camera.z = -1000;
        this.view.backgroundColor = 0x000000;
        var l = 20;
        var radius = 500;
        var mat = new MethodMaterial_1.MethodMaterial(0xff0000);
        mat.lightPicker = new StaticLightPicker_1.StaticLightPicker([this.light]);
        var torus = new PrimitiveTorusPrefab_1.PrimitiveTorusPrefab(mat, ElementsType_1.ElementsType.TRIANGLE, 50, 10, 32, 32, false);
        for (var c = 0; c < l; c++) {
            var t = Math.PI * 2 * c / l;
            var m = torus.getNewObject();
            m.x = Math.cos(t) * radius;
            m.y = 0;
            m.z = Math.sin(t) * radius;
            this.view.scene.addChild(m);
        }
        this.view.scene.addChild(this.light);
        this.view.y = this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
        console.log("renderer ", this.view.renderer);
        console.log("scene ", this.view.scene);
        console.log("view ", this.view);
        this.view.render();
        window.onresize = function (event) { return _this.onResize(event); };
        this.raf = new RequestAnimationFrame_1.RequestAnimationFrame(this.tick, this);
        this.raf.start();
    }
    ColorMultiPassMatTest.prototype.tick = function (dt) {
        this.counter += 0.005;
        this.view.camera.lookAt(this.center);
        this.view.camera.x = Math.cos(this.counter) * 800;
        this.view.camera.z = Math.sin(this.counter) * 800;
        this.view.render();
    };
    ColorMultiPassMatTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.y = 0;
        this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
    };
    return ColorMultiPassMatTest;
}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGVyaWFscy9Db2xvck11bHRpUGFzc01hdFRlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlCQUE0QiwrQkFBK0IsQ0FBQyxDQUFBO0FBQzVELHNDQUFxQyw2Q0FBNkMsQ0FBQyxDQUFBO0FBQ25GLHNCQUF5Qiw2QkFBNkIsQ0FBQyxDQUFBO0FBRXZELHFCQUF5Qix5QkFBeUIsQ0FBQyxDQUFBO0FBRW5ELDJCQUE2Qix1Q0FBdUMsQ0FBQyxDQUFBO0FBQ3JFLGtDQUFrQyw2REFBNkQsQ0FBQyxDQUFBO0FBQ2hHLHFDQUFxQyxpREFBaUQsQ0FBQyxDQUFBO0FBQ3ZGLDZCQUErQiwwQ0FBMEMsQ0FBQyxDQUFBO0FBRTFFLGdDQUFpQyx1Q0FBdUMsQ0FBQyxDQUFBO0FBRXpFLCtCQUFnQywyQ0FBMkMsQ0FBQyxDQUFBO0FBRTVFO0lBUUM7UUFSRCxpQkEwRUM7UUFyRVEsWUFBTyxHQUFVLENBQUMsQ0FBQztRQUNuQixXQUFNLEdBQVksSUFBSSxtQkFBUSxFQUFFLENBQUM7UUFJeEMsYUFBSyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFDM0IsYUFBSyxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7UUFFNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksV0FBSSxDQUFDLElBQUksaUNBQWUsRUFBRSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO1FBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLFFBQVEsQ0FBQztRQUVyQyxJQUFJLENBQUMsR0FBVSxFQUFFLENBQUM7UUFDbEIsSUFBSSxNQUFNLEdBQVUsR0FBRyxDQUFDO1FBRXhCLElBQUksR0FBRyxHQUFrQixJQUFJLCtCQUFjLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFdEQsR0FBRyxDQUFDLFdBQVcs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UUFFbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7SUFDdkMsQ0FBQztJQUNGLDRCQUFDO0FBQUQsQ0ExRUEsQUEwRUMsSUFBQSIsImZpbGUiOiJtYXRlcmlhbHMvQ29sb3JNdWx0aVBhc3NNYXRUZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWZWN0b3IzRH1cdFx0XHRcdFx0XHRmcm9tIFwiYXdheWpzLWNvcmUvbGliL2dlb20vVmVjdG9yM0RcIjtcbmltcG9ydCB7UmVxdWVzdEFuaW1hdGlvbkZyYW1lfVx0XHRmcm9tIFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL1JlcXVlc3RBbmltYXRpb25GcmFtZVwiO1xuaW1wb3J0IHtEZWJ1Z31cdFx0XHRcdFx0XHRmcm9tIFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0RlYnVnXCI7XG5cbmltcG9ydCB7Vmlld31cdFx0XHRcdFx0XHRcdGZyb20gXCJhd2F5anMtZGlzcGxheS9saWIvVmlld1wiO1xuaW1wb3J0IHtTcHJpdGV9XHRcdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1kaXNwbGF5L2xpYi9kaXNwbGF5L1Nwcml0ZVwiO1xuaW1wb3J0IHtQb2ludExpZ2h0fVx0XHRcdFx0XHRmcm9tIFwiYXdheWpzLWRpc3BsYXkvbGliL2Rpc3BsYXkvUG9pbnRMaWdodFwiO1xuaW1wb3J0IHtTdGF0aWNMaWdodFBpY2tlcn1cdFx0XHRmcm9tIFwiYXdheWpzLWRpc3BsYXkvbGliL21hdGVyaWFscy9saWdodHBpY2tlcnMvU3RhdGljTGlnaHRQaWNrZXJcIjtcbmltcG9ydCB7UHJpbWl0aXZlVG9ydXNQcmVmYWJ9XHRcdFx0ZnJvbSBcImF3YXlqcy1kaXNwbGF5L2xpYi9wcmVmYWJzL1ByaW1pdGl2ZVRvcnVzUHJlZmFiXCI7XG5pbXBvcnQge0VsZW1lbnRzVHlwZX1cdFx0XHRcdFx0ZnJvbSBcImF3YXlqcy1kaXNwbGF5L2xpYi9ncmFwaGljcy9FbGVtZW50c1R5cGVcIjtcblxuaW1wb3J0IHtEZWZhdWx0UmVuZGVyZXJ9XHRcdFx0XHRmcm9tIFwiYXdheWpzLXJlbmRlcmVyZ2wvbGliL0RlZmF1bHRSZW5kZXJlclwiO1xuXG5pbXBvcnQge01ldGhvZE1hdGVyaWFsfVx0XHRcdFx0ZnJvbSBcImF3YXlqcy1tZXRob2RtYXRlcmlhbHMvbGliL01ldGhvZE1hdGVyaWFsXCI7XG5cbmNsYXNzIENvbG9yTXVsdGlQYXNzTWF0VGVzdFxue1xuXHRwcml2YXRlIHZpZXc6Vmlldztcblx0cHJpdmF0ZSBsaWdodDpQb2ludExpZ2h0O1xuXHRwcml2YXRlIHJhZjpSZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG5cdHByaXZhdGUgY291bnRlcjpudW1iZXIgPSAwO1xuXHRwcml2YXRlIGNlbnRlcjpWZWN0b3IzRCA9IG5ldyBWZWN0b3IzRCgpO1xuXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdERlYnVnLlRIUk9XX0VSUk9SUyA9IGZhbHNlO1xuXHRcdERlYnVnLkxPR19QSV9FUlJPUlMgPSBmYWxzZTtcblxuXHRcdHRoaXMubGlnaHQgPSBuZXcgUG9pbnRMaWdodCgpO1xuXHRcdHRoaXMudmlldyA9IG5ldyBWaWV3KG5ldyBEZWZhdWx0UmVuZGVyZXIoKSk7XG5cdFx0dGhpcy52aWV3LmNhbWVyYS56ID0gLTEwMDA7XG5cdFx0dGhpcy52aWV3LmJhY2tncm91bmRDb2xvciA9IDB4MDAwMDAwO1xuXG5cdFx0dmFyIGw6bnVtYmVyID0gMjA7XG5cdFx0dmFyIHJhZGl1czpudW1iZXIgPSA1MDA7XG5cblx0XHR2YXIgbWF0Ok1ldGhvZE1hdGVyaWFsID0gbmV3IE1ldGhvZE1hdGVyaWFsKDB4ZmYwMDAwKTtcblxuXHRcdG1hdC5saWdodFBpY2tlciA9IG5ldyBTdGF0aWNMaWdodFBpY2tlcihbdGhpcy5saWdodF0pO1xuXG5cdFx0dmFyIHRvcnVzOlByaW1pdGl2ZVRvcnVzUHJlZmFiID0gbmV3IFByaW1pdGl2ZVRvcnVzUHJlZmFiKG1hdCwgRWxlbWVudHNUeXBlLlRSSUFOR0xFLCA1MCAsIDEwLCAzMiAsIDMyICwgZmFsc2UpO1xuXG5cdFx0Zm9yICh2YXIgYzpudW1iZXIgPSAwOyBjIDwgbCA7IGMrKykge1xuXHRcdFx0dmFyIHQ6bnVtYmVyID0gTWF0aC5QSSoyKmMvbDtcblx0XHRcdHZhciBtOlNwcml0ZSA9IDxTcHJpdGU+IHRvcnVzLmdldE5ld09iamVjdCgpO1xuXG5cdFx0XHRtLnggPSBNYXRoLmNvcyh0KSpyYWRpdXM7XG5cdFx0XHRtLnkgPSAwO1xuXHRcdFx0bS56ID0gTWF0aC5zaW4odCkqcmFkaXVzO1xuXG5cdFx0XHR0aGlzLnZpZXcuc2NlbmUuYWRkQ2hpbGQobSk7XG5cdFx0fVxuXG5cdFx0dGhpcy52aWV3LnNjZW5lLmFkZENoaWxkKHRoaXMubGlnaHQpO1xuXG5cdFx0dGhpcy52aWV3LnkgPSB0aGlzLnZpZXcueCA9IDA7XG5cdFx0dGhpcy52aWV3LndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5cdFx0dGhpcy52aWV3LmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblxuXHRcdGNvbnNvbGUubG9nKFwicmVuZGVyZXIgXCIsIHRoaXMudmlldy5yZW5kZXJlcik7XG5cdFx0Y29uc29sZS5sb2coXCJzY2VuZSBcIiwgdGhpcy52aWV3LnNjZW5lKTtcblx0XHRjb25zb2xlLmxvZyhcInZpZXcgXCIsIHRoaXMudmlldyk7XG5cblx0XHR0aGlzLnZpZXcucmVuZGVyKCk7XG5cblx0XHR3aW5kb3cub25yZXNpemUgPSAoZXZlbnQ6VUlFdmVudCkgPT4gdGhpcy5vblJlc2l6ZShldmVudCk7XG5cblx0XHR0aGlzLnJhZiA9IG5ldyBSZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy50aWNrLCB0aGlzKTtcblx0XHR0aGlzLnJhZi5zdGFydCgpO1xuXHR9XG5cblxuXHRwcml2YXRlIHRpY2soZHQ6bnVtYmVyKVxuXHR7XG5cdFx0dGhpcy5jb3VudGVyICs9IDAuMDA1O1xuXHRcdHRoaXMudmlldy5jYW1lcmEubG9va0F0KHRoaXMuY2VudGVyKTtcblx0XHR0aGlzLnZpZXcuY2FtZXJhLnggPSBNYXRoLmNvcyh0aGlzLmNvdW50ZXIpKjgwMDtcblx0XHR0aGlzLnZpZXcuY2FtZXJhLnogPSBNYXRoLnNpbih0aGlzLmNvdW50ZXIpKjgwMDtcblxuXHRcdHRoaXMudmlldy5yZW5kZXIoKTtcblx0fVxuXG5cdHB1YmxpYyBvblJlc2l6ZShldmVudDpVSUV2ZW50ID0gbnVsbClcblx0e1xuXHRcdHRoaXMudmlldy55ID0gMDtcblx0XHR0aGlzLnZpZXcueCA9IDA7XG5cdFx0dGhpcy52aWV3LndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG5cdFx0dGhpcy52aWV3LmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcblx0fVxufSJdLCJzb3VyY2VSb290IjoiLi90ZXN0cyJ9
