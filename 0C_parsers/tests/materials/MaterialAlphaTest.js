"use strict";
var BitmapImage2D_1 = require("awayjs-core/lib/image/BitmapImage2D");
var Sampler2D_1 = require("awayjs-core/lib/image/Sampler2D");
var LoaderEvent_1 = require("awayjs-core/lib/events/LoaderEvent");
var Vector3D_1 = require("awayjs-core/lib/geom/Vector3D");
var AssetLibrary_1 = require("awayjs-core/lib/library/AssetLibrary");
var URLRequest_1 = require("awayjs-core/lib/net/URLRequest");
var Debug_1 = require("awayjs-core/lib/utils/Debug");
var RequestAnimationFrame_1 = require("awayjs-core/lib/utils/RequestAnimationFrame");
var View_1 = require("awayjs-display/lib/View");
var DirectionalLight_1 = require("awayjs-display/lib/display/DirectionalLight");
var Sprite_1 = require("awayjs-display/lib/display/Sprite");
var ElementsType_1 = require("awayjs-display/lib/graphics/ElementsType");
var StaticLightPicker_1 = require("awayjs-display/lib/materials/lightpickers/StaticLightPicker");
var PrimitiveTorusPrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveTorusPrefab");
var PrimitiveCubePrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveCubePrefab");
var PrimitiveCapsulePrefab_1 = require("awayjs-display/lib/prefabs/PrimitiveCapsulePrefab");
var DefaultRenderer_1 = require("awayjs-renderergl/lib/DefaultRenderer");
var MethodMaterial_1 = require("awayjs-methodmaterials/lib/MethodMaterial");
var OBJParser_1 = require("awayjs-parsers/lib/OBJParser");
var MaterialAlphaTest = (function () {
    function MaterialAlphaTest() {
        var _this = this;
        this.sprites = new Array();
        this.aValues = Array(0, .1, .5, .8, .9, .99, 1);
        this.aValuesP = 0;
        Debug_1.Debug.LOG_PI_ERRORS = false;
        Debug_1.Debug.THROW_ERRORS = false;
        this.view = new View_1.View(new DefaultRenderer_1.DefaultRenderer());
        this.raf = new RequestAnimationFrame_1.RequestAnimationFrame(this.render, this);
        this.onResize();
        this.light = new DirectionalLight_1.DirectionalLight();
        this.light.color = 0xFFFFFF;
        this.light.direction = new Vector3D_1.Vector3D(1, 1, 0);
        this.light.ambient = 0;
        this.light.ambientColor = 0xFFFFFF;
        this.light.diffuse = 1;
        this.light.specular = 1;
        this.lightB = new DirectionalLight_1.DirectionalLight();
        this.lightB.color = 0xFF0000;
        this.lightB.direction = new Vector3D_1.Vector3D(-1, 0, 1);
        this.lightB.ambient = 0;
        this.lightB.ambientColor = 0xFFFFFF;
        this.lightB.diffuse = 1;
        this.lightB.specular = 1;
        this.view.scene.addChild(this.light);
        this.view.scene.addChild(this.lightB);
        this.view.backgroundColor = 0x222222;
        AssetLibrary_1.AssetLibrary.enableParser(OBJParser_1.OBJParser);
        var session;
        session = AssetLibrary_1.AssetLibrary.getLoader();
        session.addEventListener(LoaderEvent_1.LoaderEvent.LOAD_COMPLETE, function (event) { return _this.onLoadComplete(event); });
        session.load(new URLRequest_1.URLRequest('assets/platonic.obj'));
        session = AssetLibrary_1.AssetLibrary.getLoader();
        session.addEventListener(LoaderEvent_1.LoaderEvent.LOAD_COMPLETE, function (event) { return _this.onLoadComplete(event); });
        session.load(new URLRequest_1.URLRequest('assets/dots.png'));
        window.onresize = function (event) { return _this.onResize(event); };
        document.onmousedown = function (event) { return _this.onMouseDown(event); };
    }
    MaterialAlphaTest.prototype.onMouseDown = function (event) {
        this.cubeColorMaterial.alpha = this.torusTextureMaterial.alpha = this.loadedSpriteMaterial.alpha = this.aValues[this.aValuesP];
        alert('Alpha: ' + this.aValues[this.aValuesP]);
        this.aValuesP++;
        if (this.aValuesP > this.aValues.length - 1)
            this.aValuesP = 0;
    };
    MaterialAlphaTest.prototype.render = function (dt) {
        if (this.sprites)
            for (var c = 0; c < this.sprites.length; c++)
                this.sprites[c].rotationY += .35;
        this.view.render();
    };
    MaterialAlphaTest.prototype.onLoadComplete = function (event) {
        var loader = event.target;
        var l = loader.baseDependency.assets.length;
        for (var c = 0; c < l; c++) {
            var d = loader.baseDependency.assets[c];
            console.log(d.name);
            switch (d.assetType) {
                case Sprite_1.Sprite.assetType:
                    var sprite = d;
                    this.loadedSprite = sprite;
                    if (d.name == 'Sprite_g0') {
                        this.loadedSprite = sprite;
                        sprite.y = -400;
                        sprite.transform.scaleTo(5, 5, 5);
                    }
                    else {
                        sprite.transform.scaleTo(3.5, 3.5, 3.5);
                    }
                    if (this.loadedSpriteMaterial)
                        sprite.material = this.loadedSpriteMaterial;
                    this.view.scene.addChild(sprite);
                    this.sprites.push(sprite);
                    this.raf.start();
                    break;
                case BitmapImage2D_1.BitmapImage2D.assetType:
                    // Light Picker
                    this.staticLightPicker = new StaticLightPicker_1.StaticLightPicker([this.light, this.lightB]);
                    // Material for loaded sprite
                    this.loadedSpriteMaterial = new MethodMaterial_1.MethodMaterial(d);
                    this.loadedSpriteMaterial.style.sampler = new Sampler2D_1.Sampler2D(true, true, false);
                    this.loadedSpriteMaterial.lightPicker = this.staticLightPicker;
                    this.loadedSpriteMaterial.alpha = 1;
                    this.loadedSpriteMaterial.bothSides = true;
                    if (this.loadedSprite)
                        this.loadedSprite.material = this.loadedSpriteMaterial;
                    // Torus Texture Material
                    this.torusTextureMaterial = new MethodMaterial_1.MethodMaterial(d);
                    this.torusTextureMaterial.style.sampler = new Sampler2D_1.Sampler2D(true, true, false);
                    this.torusTextureMaterial.lightPicker = this.staticLightPicker;
                    this.torusTextureMaterial.bothSides = true;
                    this.torusTextureMaterial.alpha = .8;
                    // Torus
                    var torus = new PrimitiveTorusPrefab_1.PrimitiveTorusPrefab(this.torusTextureMaterial, ElementsType_1.ElementsType.TRIANGLE, 150, 50, 64, 64);
                    // Torus Sprite ( left )
                    var torusSprite = torus.getNewObject();
                    torusSprite.rotationX = 90;
                    torusSprite.x = 600;
                    this.sprites.push(torusSprite);
                    this.view.scene.addChild(torusSprite);
                    // Torus Color Material
                    this.cubeColorMaterial = new MethodMaterial_1.MethodMaterial(0x0090ff);
                    this.cubeColorMaterial.lightPicker = this.staticLightPicker;
                    this.cubeColorMaterial.alpha = .8;
                    this.cubeColorMaterial.bothSides = true;
                    var cube = new PrimitiveCubePrefab_1.PrimitiveCubePrefab(this.cubeColorMaterial, ElementsType_1.ElementsType.TRIANGLE, 300, 300, 300, 20, 20, 20);
                    // Torus Sprite ( right )
                    var cubeSprite = cube.getNewObject();
                    cubeSprite.rotationX = 90;
                    cubeSprite.x = -600;
                    this.sprites.push(cubeSprite);
                    this.view.scene.addChild(cubeSprite);
                    this.capsuleColorMaterial = new MethodMaterial_1.MethodMaterial(0x00ffff);
                    this.capsuleColorMaterial.lightPicker = this.staticLightPicker;
                    var capsule = new PrimitiveCapsulePrefab_1.PrimitiveCapsulePrefab(this.capsuleColorMaterial, ElementsType_1.ElementsType.TRIANGLE, 100, 200);
                    // Torus Sprite ( right )
                    var capsuleSprite = capsule.getNewObject();
                    this.sprites.push(capsuleSprite);
                    this.view.scene.addChild(capsuleSprite);
                    this.cubeColorMaterial.alpha = this.torusTextureMaterial.alpha = this.loadedSpriteMaterial.alpha = 1;
                    break;
            }
        }
    };
    MaterialAlphaTest.prototype.onResize = function (event) {
        if (event === void 0) { event = null; }
        this.view.y = 0;
        this.view.x = 0;
        this.view.width = window.innerWidth;
        this.view.height = window.innerHeight;
    };
    return MaterialAlphaTest;
}());

//# sourceMappingURL=data:application/json;base64,
