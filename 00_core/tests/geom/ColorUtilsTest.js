"use strict";
var ColorTransform_1 = require("awayjs-core/lib/geom/ColorTransform");
var ColorUtils_1 = require("awayjs-core/lib/utils/ColorUtils");
var ColorUtilsTest = (function () {
    function ColorUtilsTest() {
        /*
        constructor(    inRedMultiplier:number = 1.0,  inGreenMultiplier:number = 1.0, inBlueMultiplier:number = 1.0,  inAlphaMultiplier:number = 1.0,
                        inRedOffset:number = 0.0,      inGreenOffset:number = 0.0,     inBlueOffset:number = 0.0,      inAlphaOffset:number = 0.0)
        */
        var ct_RED = new ColorTransform_1.default(1, 0, 0, 1, 255, 0, 0, 255);
        console.log("ct_RED - ARGB: ", ColorUtils_1.default.float32ColorToARGB(ct_RED.color));
        var ct_GREEN = new ColorTransform_1.default(0, 1, 0, 1, 0, 255, 0, 255);
        console.log("ct_GREEN - ARGB: ", ColorUtils_1.default.float32ColorToARGB(ct_GREEN.color));
        var ct_BLUE = new ColorTransform_1.default(0, 0, 1, 1, 0, 0, 255, 255);
        console.log("ct_BLUE - ARGB: ", ColorUtils_1.default.float32ColorToARGB(ct_BLUE.color));
        var ct_RED_a = new ColorTransform_1.default(.5, 0, 0, 1, 255, 0, 0, 255);
        console.log("ct_RED_a - ARGB: ", ColorUtils_1.default.float32ColorToARGB(ct_RED_a.color));
        var ct_GREEN_a = new ColorTransform_1.default(0, .5, 0, 1, 0, 255, 0, 255);
        console.log("ct_GREEN_a - ARGB: ", ColorUtils_1.default.float32ColorToARGB(ct_GREEN_a.color));
        var ct_BLUE_a = new ColorTransform_1.default(0, 0, .5, 1, 0, 0, 255, 255);
        console.log("ct_BLUE_a - ARGB: ", ColorUtils_1.default.float32ColorToARGB(ct_BLUE_a.color));
        console.log('--------------------------------------------------------------------------------');
        ct_RED.color = 0xff0000;
        console.log("SET - ct_RED - ARGB: ", ColorUtils_1.default.float32ColorToARGB(ct_RED.color));
        ct_GREEN.color = 0x00ff00;
        console.log("SET - ct_GREEN - ARGB: ", ColorUtils_1.default.float32ColorToARGB(ct_GREEN.color));
        ct_BLUE.color = 0x0000ff;
        console.log("SET - ct_BLUE - ARGB: ", ColorUtils_1.default.float32ColorToARGB(ct_BLUE.color));
    }
    return ColorUtilsTest;
}());

//# sourceMappingURL=data:application/json;base64,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QUFFLG9CQUFVLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUNGLHFCQUFDO0FBQUQsQ0E3Q0EsQUE2Q0MsSUFBQSIsImZpbGUiOiJnZW9tL0NvbG9yVXRpbHNUZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbG9yVHJhbnNmb3JtXHRcdFx0ZnJvbSBcImF3YXlqcy1jb3JlL2xpYi9nZW9tL0NvbG9yVHJhbnNmb3JtXCI7XG5pbXBvcnQgQ29sb3JVdGlsc1x0XHRcdFx0ZnJvbSBcImF3YXlqcy1jb3JlL2xpYi91dGlscy9Db2xvclV0aWxzXCI7XG5cbmNsYXNzIENvbG9yVXRpbHNUZXN0XG57XG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdC8qXG5cdFx0Y29uc3RydWN0b3IoICAgIGluUmVkTXVsdGlwbGllcjpudW1iZXIgPSAxLjAsICBpbkdyZWVuTXVsdGlwbGllcjpudW1iZXIgPSAxLjAsIGluQmx1ZU11bHRpcGxpZXI6bnVtYmVyID0gMS4wLCAgaW5BbHBoYU11bHRpcGxpZXI6bnVtYmVyID0gMS4wLFxuXHRcdFx0XHRcdFx0aW5SZWRPZmZzZXQ6bnVtYmVyID0gMC4wLCAgICAgIGluR3JlZW5PZmZzZXQ6bnVtYmVyID0gMC4wLCAgICAgaW5CbHVlT2Zmc2V0Om51bWJlciA9IDAuMCwgICAgICBpbkFscGhhT2Zmc2V0Om51bWJlciA9IDAuMClcblx0XHQqL1xuXG5cdFx0dmFyIGN0X1JFRCA9IG5ldyBDb2xvclRyYW5zZm9ybSgxLCAwLCAwLCAxLCAyNTUsIDAsIDAsIDI1NSk7XG5cblx0XHRjb25zb2xlLmxvZyhcImN0X1JFRCAtIEFSR0I6IFwiLCBDb2xvclV0aWxzLmZsb2F0MzJDb2xvclRvQVJHQiggY3RfUkVELmNvbG9yKSk7XG5cblx0XHR2YXIgY3RfR1JFRU4gPSBuZXcgQ29sb3JUcmFuc2Zvcm0oMCwgMSwgMCwgMSwgMCwgMjU1LCAwLCAyNTUpO1xuXG5cdFx0Y29uc29sZS5sb2coXCJjdF9HUkVFTiAtIEFSR0I6IFwiLCBDb2xvclV0aWxzLmZsb2F0MzJDb2xvclRvQVJHQiggY3RfR1JFRU4uY29sb3IpKTtcblxuXHRcdHZhciBjdF9CTFVFID0gbmV3IENvbG9yVHJhbnNmb3JtKDAsIDAsIDEsIDEsIDAsIDAsIDI1NSwgMjU1KTtcblxuXHRcdGNvbnNvbGUubG9nKFwiY3RfQkxVRSAtIEFSR0I6IFwiLCBDb2xvclV0aWxzLmZsb2F0MzJDb2xvclRvQVJHQihjdF9CTFVFLmNvbG9yKSk7XG5cblx0XHR2YXIgY3RfUkVEX2EgPSBuZXcgQ29sb3JUcmFuc2Zvcm0oLjUsIDAsIDAsIDEsIDI1NSwgMCwgMCwgMjU1KTtcblxuXHRcdGNvbnNvbGUubG9nKFwiY3RfUkVEX2EgLSBBUkdCOiBcIiwgQ29sb3JVdGlscy5mbG9hdDMyQ29sb3JUb0FSR0IoY3RfUkVEX2EuY29sb3IpKTtcblxuXHRcdHZhciBjdF9HUkVFTl9hID0gbmV3IENvbG9yVHJhbnNmb3JtKDAsIC41LCAwLCAxLCAwLCAyNTUsIDAsIDI1NSk7XG5cblx0XHRjb25zb2xlLmxvZyhcImN0X0dSRUVOX2EgLSBBUkdCOiBcIiwgQ29sb3JVdGlscy5mbG9hdDMyQ29sb3JUb0FSR0IoY3RfR1JFRU5fYS5jb2xvcikpO1xuXG5cdFx0dmFyIGN0X0JMVUVfYSA9IG5ldyBDb2xvclRyYW5zZm9ybSgwLCAwLCAuNSwgMSwgMCwgMCwgMjU1LCAyNTUpO1xuXG5cdFx0Y29uc29sZS5sb2coXCJjdF9CTFVFX2EgLSBBUkdCOiBcIiwgQ29sb3JVdGlscy5mbG9hdDMyQ29sb3JUb0FSR0IoIGN0X0JMVUVfYS5jb2xvcikpO1xuXG5cblx0XHRjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcblxuXHRcdGN0X1JFRC5jb2xvciA9IDB4ZmYwMDAwO1xuXHRcdGNvbnNvbGUubG9nKFwiU0VUIC0gY3RfUkVEIC0gQVJHQjogXCIsIENvbG9yVXRpbHMuZmxvYXQzMkNvbG9yVG9BUkdCKGN0X1JFRC5jb2xvcikpO1xuXG5cdFx0Y3RfR1JFRU4uY29sb3IgPSAweDAwZmYwMDtcblx0XHRjb25zb2xlLmxvZyhcIlNFVCAtIGN0X0dSRUVOIC0gQVJHQjogXCIsIENvbG9yVXRpbHMuZmxvYXQzMkNvbG9yVG9BUkdCKGN0X0dSRUVOLmNvbG9yKSk7XG5cblx0XHRjdF9CTFVFLmNvbG9yID0gMHgwMDAwZmY7XG5cdFx0Y29uc29sZS5sb2coXCJTRVQgLSBjdF9CTFVFIC0gQVJHQjogXCIsIENvbG9yVXRpbHMuZmxvYXQzMkNvbG9yVG9BUkdCKGN0X0JMVUUuY29sb3IpKTtcblx0fVxufSJdLCJzb3VyY2VSb290IjoiLi90ZXN0cyJ9
